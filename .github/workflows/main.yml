name: Main Stopportal workflow

on:
  push:
    branches:
      - deploy

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install poetry
      uses: Gr1N/setup-poetry@v8

    - name: Run pytest check
      run: poetry run pytest -vv --cov="backend" .
      env:
        BACKEND_HOST: "0.0.0.0"
  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install poetry
        uses: Gr1N/setup-poetry@v8

      - name: Run black check
        run: poetry run black --check .
  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install poetry
        uses: Gr1N/setup-poetry@v8

      - name: Run flake8 check
        run: poetry run flake8 --count .
  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install poetry
        uses: Gr1N/setup-poetry@v8

      - name: Run mypy check
        run: poetry run mypy .

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend/
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/stopportal-backend:latest

#  frontend_tests:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up nodeJS
#        # Это готовый воркфлоу для установки Node.js на раннер
#        uses: actions/setup-node@v3
#        with:
#          # Это параметр воркфлоу, указывающий нужную версию Node.js
#          node-version: 18
#
#      - name: Install dependencies
#        # Эта команда устанавливает зависимости для фронтенда
#        run: |
#          cd frontend/
#          npm ci
#
#      - name: Test frontend
#        # Запускаем тесты
#        run: |
#          cd frontend/
#          npm run test
#  build_frontend_and_push_to_docker_hub:
#    name: Push frontend Docker image to DockerHub
#    runs-on: ubuntu-latest
#    needs: frontend_tests
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Push to DockerHub
#        uses: docker/build-push-action@v4
#        with:
#          context: ./frontend/
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest
#  build_gateway_and_push_to_docker_hub:
#    name: Push gateway Docker image to DockerHub
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Push to DockerHub
#        uses: docker/build-push-action@v4
#        with:
#          context: ./nginx/
#          push: true
#          # Тут вместо username должен быть ваш логин на Docker Hub
#          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest
#  deploy:
#    runs-on: ubuntu-latest
#    needs:
#      # Дождёмся билда всех образов Kittygram
#      - build_and_push_to_docker_hub
#      - build_frontend_and_push_to_docker_hub
#      - build_gateway_and_push_to_docker_hub
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v3
#      # Копируем docker-compose.production.yml на продакшен-сервер
#      - name: Copy docker-compose.yml via ssh
#        uses: appleboy/scp-action@master
#        # Передаём параметры для action appleboy/scp-action:
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          passphrase: ${{ secrets.SSH_PASSPHRASE }}
#          source: "docker-compose.production.yml"
#          target: "kittygram"
#      - name: Executing remote ssh commands to deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          passphrase: ${{ secrets.SSH_PASSPHRASE }}
#          # Параметр script передаёт в action appleboy/ssh-action команды,
#          # которые нужно выполнить на сервере,
#          # с которым установлено соединение
#          script: |
#            cd kittygram
#            # Выполняет pull образов с Docker Hub
#            sudo docker compose -f docker-compose.production.yml pull
#            # Перезапускает все контейнеры в Docker Compose
#            sudo docker compose -f docker-compose.production.yml down
#            sudo docker compose -f docker-compose.production.yml up -d
#            # Выполняет миграции и сбор статики
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
#            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/
#  send_message:
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#      - name: Send message
#        uses: appleboy/telegram-action@master
#        with:
#          to: ${{ secrets.TELEGRAM_TO }}
#          token: ${{ secrets.TELEGRAM_TOKEN }}
#          message: Деплой успешно выполнен!